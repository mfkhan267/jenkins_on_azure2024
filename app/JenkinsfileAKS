pipeline {
    agent any
    environment {
        AZURE_TENANT_ID = credentials('azure-tenant-id')
        ACR_REGISTRY = "acr267.azurecr.io"
        APP_REPO_NAME = "gsd"
    }

    stages {
        stage('git checkout') {
            steps {
              checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/mfkhan267/jenkins_on_azure2024.git']]])
              sh 'pwd'
              sh 'ls -ltr'
              dir('app'){
                    sh 'pwd'
                        }
                    }
                              }
        stage('build docker image'){
            steps{
    	        dir('app'){
                    sh 'pwd'
                    sh 'sed -i "s/WebApp/WebApp v${BUILD_NUMBER}/g" app.js'
                    sh 'docker build --force-rm -t ${ACR_REGISTRY}/${APP_REPO_NAME}:${BUILD_NUMBER} .'
                    sh 'docker image ls'
                        }
            }
        }
        stage('push image'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'acr', passwordVariable: 'password', usernameVariable: 'username')]) {
                sh 'echo Pushing Image ${ACR_REGISTRY}/${APP_REPO_NAME}:${BUILD_NUMBER} to the ACR'
                sh 'echo ${password} | docker login ${ACR_REGISTRY} --username ${username} --password-stdin'
                sh 'docker push ${ACR_REGISTRY}/${APP_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage('Install Azure CLI'){
            steps{
                sh '''
                echo 'Installing Azure CLI'
                cat /etc/os-release
                hostname
                hostnamectl
                sudo apt-get update
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                az --version
                '''
            }
        }
        stage('deploy web app'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'asp', passwordVariable: 'password', usernameVariable: 'username')]) {
                sh 'az login --service-principal -u ${username} -p ${password} --tenant ${AZURE_TENANT_ID}'
                }
                withCredentials([usernamePassword(credentialsId: 'acr', passwordVariable: 'password', usernameVariable: 'username')]) {
                sh 'az aks get-credentials --resource-group aks_RG267 --name aks_demo267 --overwrite-existing'
                sh 'az acr show --name acr267 --resource-group jenkins267 -o table'
                //sh 'az aks update --resource-group aks_RG267 --name aks_demo267 --attach-acr $ACR_NAME'
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'aks', namespace: '', restrictKubeConfigAccess: true, serverUrl: '') {
                    sh 'kubectl get nodes'
                    sh 'kubectl set image deployment web-deploy web-deploy=${ACR_REGISTRY}/${APP_REPO_NAME}:${BUILD_NUMBER}'
                }
                //sh 'az webapp config container set --name tetris-webapp267 --resource-group jenkins267 --docker-custom-image-name ${ACR_REGISTRY}/${APP_REPO_NAME}:${BUILD_NUMBER} --docker-registry-server-url https://${ACR_REGISTRY} --docker-registry-server-user ${username} --docker-registry-server-password ${password}'
                // sh 'az webapp config container set --name tetris-webapp267 --resource-group jenkins267 --docker-custom-image-name nginx:latest'
                // sh 'az webapp config container set --name tetris-webapp267 --resource-group jenkins267 --docker-custom-image-name mfk267/catcontainer:latest'
                // sh 'az webapp config container set --name tetris-webapp267 --resource-group jenkins267 --docker-custom-image-name mfk267/gsd:latest'
                }
                sh 'echo Successfully updated the AKS Cluster web-deploy with the image version ${BUILD_NUMBER}'
            }
        }
    }
    post {
        always {
            echo 'Deleting all local images'
            sh 'docker image prune -af'
            sh 'docker logout'
            sh 'az logout'
        }
    }
}
